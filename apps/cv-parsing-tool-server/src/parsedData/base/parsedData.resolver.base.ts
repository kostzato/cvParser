/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ParsedData } from "./ParsedData";
import { ParsedDataCountArgs } from "./ParsedDataCountArgs";
import { ParsedDataFindManyArgs } from "./ParsedDataFindManyArgs";
import { ParsedDataFindUniqueArgs } from "./ParsedDataFindUniqueArgs";
import { CreateParsedDataArgs } from "./CreateParsedDataArgs";
import { UpdateParsedDataArgs } from "./UpdateParsedDataArgs";
import { DeleteParsedDataArgs } from "./DeleteParsedDataArgs";
import { Resume } from "../../resume/base/Resume";
import { ParsedDataService } from "../parsedData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ParsedData)
export class ParsedDataResolverBase {
  constructor(
    protected readonly service: ParsedDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ParsedData",
    action: "read",
    possession: "any",
  })
  async _parsedDataItemsMeta(
    @graphql.Args() args: ParsedDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ParsedData])
  @nestAccessControl.UseRoles({
    resource: "ParsedData",
    action: "read",
    possession: "any",
  })
  async parsedDataItems(
    @graphql.Args() args: ParsedDataFindManyArgs
  ): Promise<ParsedData[]> {
    return this.service.parsedDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ParsedData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ParsedData",
    action: "read",
    possession: "own",
  })
  async parsedData(
    @graphql.Args() args: ParsedDataFindUniqueArgs
  ): Promise<ParsedData | null> {
    const result = await this.service.parsedData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParsedData)
  @nestAccessControl.UseRoles({
    resource: "ParsedData",
    action: "create",
    possession: "any",
  })
  async createParsedData(
    @graphql.Args() args: CreateParsedDataArgs
  ): Promise<ParsedData> {
    return await this.service.createParsedData({
      ...args,
      data: {
        ...args.data,

        resume: args.data.resume
          ? {
              connect: args.data.resume,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParsedData)
  @nestAccessControl.UseRoles({
    resource: "ParsedData",
    action: "update",
    possession: "any",
  })
  async updateParsedData(
    @graphql.Args() args: UpdateParsedDataArgs
  ): Promise<ParsedData | null> {
    try {
      return await this.service.updateParsedData({
        ...args,
        data: {
          ...args.data,

          resume: args.data.resume
            ? {
                connect: args.data.resume,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParsedData)
  @nestAccessControl.UseRoles({
    resource: "ParsedData",
    action: "delete",
    possession: "any",
  })
  async deleteParsedData(
    @graphql.Args() args: DeleteParsedDataArgs
  ): Promise<ParsedData | null> {
    try {
      return await this.service.deleteParsedData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Resume, {
    nullable: true,
    name: "resume",
  })
  @nestAccessControl.UseRoles({
    resource: "Resume",
    action: "read",
    possession: "any",
  })
  async getResume(
    @graphql.Parent() parent: ParsedData
  ): Promise<Resume | null> {
    const result = await this.service.getResume(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
