/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ParsedData as PrismaParsedData,
  Resume as PrismaResume,
} from "@prisma/client";

export class ParsedDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParsedDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.parsedData.count(args);
  }

  async parsedDataItems(
    args: Prisma.ParsedDataFindManyArgs
  ): Promise<PrismaParsedData[]> {
    return this.prisma.parsedData.findMany(args);
  }
  async parsedData(
    args: Prisma.ParsedDataFindUniqueArgs
  ): Promise<PrismaParsedData | null> {
    return this.prisma.parsedData.findUnique(args);
  }
  async createParsedData(
    args: Prisma.ParsedDataCreateArgs
  ): Promise<PrismaParsedData> {
    return this.prisma.parsedData.create(args);
  }
  async updateParsedData(
    args: Prisma.ParsedDataUpdateArgs
  ): Promise<PrismaParsedData> {
    return this.prisma.parsedData.update(args);
  }
  async deleteParsedData(
    args: Prisma.ParsedDataDeleteArgs
  ): Promise<PrismaParsedData> {
    return this.prisma.parsedData.delete(args);
  }

  async getResume(parentId: string): Promise<PrismaResume | null> {
    return this.prisma.parsedData
      .findUnique({
        where: { id: parentId },
      })
      .resume();
  }
}
